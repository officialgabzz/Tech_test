from langchain_openai import ChatOpenAI
from openai import OpenAI
from iriurisk_test.app_config import get_config
from typing import Optional
from iriurisk_test.prompts import Prompt
from langchain_core.messages import SystemMessage, HumanMessage
from langchain_core.output_parsers import StrOutputParser
from iriurisk_test.app_logging import get_logger
import time

CONFIG = get_config()
logger = get_logger()


class GPTClient:
    """
    A client interface for interacting with the GPT model provided by OpenAI.
    It uses a configuration file to set up the model parameters and provides
    a method to obtain responses based on user and system messages.
    """

    def __init__(self) -> None:
        """
        Initializes the GPTClient instance with the specified model, API key,
        and temperature settings from a configuration file.

        Attributes:
            _client (ChatOpenAI): An instance of the ChatOpenAI class initialized
                                  with the model, API key, and temperature settings.
        """
        self._client = ChatOpenAI(
            model=CONFIG.gpt_model,
            api_key=CONFIG.gpt_api_key,
            temperature=CONFIG.gpt_temperature,
        )

    def get_response(self, user_message: str, system_message: Prompt) -> Optional[str]:
        """
        Obtains a response from the GPT model based on the provided user and
        system messages.

        Args:
            user_message (str): The message input from the user.
            system_message (Prompt): The system prompt or message to guide the
                                     response generation.

        Returns:
            Optional[str]: The response generated by the GPT model, or None if
                           an error occurs.

        Raises:
            Exception: If an error occurs during the message processing or
                       response generation, it logs the error and raises the
        """

        try:

            messages = [
                SystemMessage(content=system_message.content),
                HumanMessage(content=user_message),
            ]
            parser = StrOutputParser()
            chain = self._client | parser
            response = chain.invoke(messages)
            return response
        except Exception as err:
            logger.error(err)
            raise err
